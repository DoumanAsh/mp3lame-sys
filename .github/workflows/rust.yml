name: Rust

on:
  push:
    branches:
      - master
    paths:
      - '.github/workflows/rust.yml'
      - 'src/**.rs'
      - 'src/**.c'
      - 'src/**.h'
      - 'tests/**'
      - 'Cargo.toml'
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - '**'
    paths:
      - '.github/workflows/rust.yml'
      - 'src/**.rs'
      - 'src/**.c'
      - 'src/**.h'
      - 'tests/**'
      - 'Cargo.toml'

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
    - uses: actions/checkout@v1

    - name: Install Rust Unix
      run: |
        if rustup --version >/dev/null 2>&1; then
            rustup update
        else
             curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal --default-toolchain stable
             echo ::add-path::$HOME/.cargo/bin
        fi
    - name: Rust version
      run: |
        cargo --version
        rustc --version
    - name: Check no features
      run: cargo check
    - name: Check with decoder
      run: cargo test --features decoder

  cross-compilation-test:
    needs: test
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        target: ["aarch64-unknown-linux-musl", "aarch64-unknown-linux-gnu", "arm-unknown-linux-musleabi"]

    steps:
    - uses: actions/checkout@v1

    - name: Install Rust Unix
      run: |
        if rustup --version >/dev/null 2>&1; then
            rustup update
        else
             curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal --default-toolchain stable
             echo ::add-path::$HOME/.cargo/bin
        fi
    - name: Install Cross
      run: |
        curl -L https://github.com/cross-rs/cross/releases/download/v0.2.4/cross-x86_64-unknown-linux-musl.tar.gz | tar xfz -
        cp cross $HOME/.cargo/bin
    - name: Test ${{ matrix.target }}
      run: cross test

    - name: Test ${{ matrix.target }} with decoder
      run: cross test --features decoder
